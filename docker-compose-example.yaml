version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: go_backend
    network_mode: host
    environment:
      - POSTGRES_HOST=localhost  
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - BB_REPO_URL=${BB_REPO_URL}
      - BB_SSH_KEY_FILE=/app/ssh_key
      - BB_USERNAME=${BB_USERNAME}
      - BB_BRANCH=${BB_BRANCH}
    depends_on:
      - postgres
    volumes:
      - ./backend:/app
      - ./ssh_key:/app/ssh_key:ro
    command: sh -c "sleep 5 && air -c .air.toml"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_BB_REPO_LINK=${REACT_APP_BB_REPO_LINK}
      - REACT_APP_JENKINS_URL=${REACT_APP_JENKINS_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    depends_on:
      - backend

volumes:
  postgres_data:

networks:
  default:
    driver: bridge